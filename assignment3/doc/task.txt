Для решения используйте любой любимый язык программирования (который есть не кластере) и технологию Streaming (см. Лекцию 4, Семинар 4,  http://hadoop.apache.org/docs/current/hadoop-streaming/HadoopStreaming.html и книгу Hadoop Definition Guide).

В решении обычно бывает несколько запусков hadoop, оформите их все в виде одного скрипта на bash (sh, zsh, ...) или python.

 
Исходные данные:

Посты stackoverflow.com

/data/stackexchange/posts - сами посты, записаны в строках, начинающихся с ‘<row’ (можно разбирать строки вручную, без специальных xml-парсеров). Значение полей:

PostTypeId - ‘1’, если это вопрос; ‘2’, если ответ на вопрос

Id - идентификатор; если это вопрос, то он откроется тут: http://stackoverflow.com/questions/<Id>

Score - показатель полезности этого вопроса или ответа

FavoriteCount - добавления вопроса в избранные

ParentId - для ответа - идентификатор поста-вопроса

OwnerUserId - идентификатор пользователя - автора поста

/data/stackexchange/users - пользователи


Id - идентификатор пользователя (в posts это OwnerUserId)

Age - возраст (может отсутствовать)

Reputation - уровень репутации пользователя

Замечания к использованию датасета:

для join с users используйте либо reduce-side join, либо bucket join, т.е. целиком в память этот файл поднимать нельзя

всюду в задачах, где говорится про “число пользователей” имеется в виду “число уникальных пользователей”

список ответов для одного вопроса считаем небольшим, его можно заносить в одно значение, сортировать в памяти и т.д.
————————————————————————————————————————————————————————————————————————————————
Задача!

Найдите наиболее популярные теги на stackoverflow.com у вопросов, оставшихся без ответа. Результат отсортируйте по числу количеству вопросов, в порядке убывания.

Входные данные: посты stackoverflow.com

Формат вывода: tag <tab> count

Вывод на печать: топ 10 строк.

 
————————————————————————————————————————————————————————————————————————————————

Команда запуска - bash hw3_hadoop.sh
